<translation-unit> ::= <external-declaration>
                    |  <translation-unit> <external-declaration>
                    |  ε
                    ;

<external-declaration> ::= <function-definition>
                         |  <declaration>
                         ;

<declaration> ::= <type-spec> ":" <init-declarator-list> ";"
                ;

<init-declarator-list> ::= <init-declarator>
                         |  <init-declarator-list> "," <init-declarator>
                         ;

<init-declarator> ::= <declarator>
                    |  <declarator> "=" <initializer>
                    ;

<declarator> ::= ID
               |  <declarator> <array-suffix>
               ;

<array-suffix> ::= "[" <constant-expression-opt> "]"
                 |  <array-suffix> "[" <constant-expression-opt> "]"
                 ;

<constant-expression-opt> ::= <constant-expression>
                            |  ε
                            ;

<type-spec> ::= <base-type> <ptr-suffix>
              ;

<base-type> ::= "int"
              |  "char"
              |  "void"
              ;

<ptr-suffix> ::= <ptr-suffix> "*"
               |  ε
               ;

<return-type> ::= <type-spec>
                |  "void"
                ;

<function-definition> ::= "fun" ID "(" <parameter-list-opt> ")" ":" <return-type> <compound-statement>
                        ;

<parameter-list-opt> ::= <parameter-list>
                       |  ε
                       ;

<parameter-list> ::= <parameter>
                   |  <parameter-list> "," <parameter>
                   ;

<parameter> ::= <type-spec> ID
              ;

<compound-statement> ::= "{" <block-item-list-opt> "}"
                       ;

<block-item-list-opt> ::= <block-item-list>
                        |  ε
                        ;

<block-item-list> ::= <block-item>
                    |  <block-item-list> <block-item>
                    ;

<block-item> ::= <declaration>
               |  <statement>
               ;

<statement> ::= <expression-statement>
              |  <selection-statement>
              |  <iteration-statement>
              |  <jump-statement>
              |  <compound-statement>
              ;

<expression-statement> ::= ";"
                         |  <expression> ";"
                         ;

<selection-statement> ::= "if" "(" <expression> ")" <statement>
                        |  "if" "(" <expression> ")" <statement> "else" <statement>
                        ;

<iteration-statement> ::= "while" "(" <expression> ")" <statement>
                        ;

<jump-statement> ::= "return" ";"
                   |  "return" <expression> ";"
                   |  "break" ";"
                   |  "continue" ";"
                   ;

<expression> ::= <expression> "," <assignment-expression>
               |  <assignment-expression>
               ;

<assignment-expression> ::= <unary-expression> "=" <assignment-expression>
                          |  <logical-or-expression>
                          ;

<logical-or-expression> ::= <logical-or-expression> "||" <logical-and-expression>
                          |  <logical-and-expression>
                          ;

<logical-and-expression> ::= <logical-and-expression> "&&" <equality-expression>
                           |  <equality-expression>
                           ;

<equality-expression> ::= <equality-expression> "==" <relational-expression>
                        |  <equality-expression> "!=" <relational-expression>
                        |  <relational-expression>
                        ;

<relational-expression> ::= <relational-expression> "<"  <additive-expression>
                          |  <relational-expression> "<=" <additive-expression>
                          |  <relational-expression> ">"  <additive-expression>
                          |  <relational-expression> ">=" <additive-expression>
                          |  <additive-expression>
                          ;

<additive-expression> ::= <additive-expression> "+" <multiplicative-expression>
                        |  <additive-expression> "-" <multiplicative-expression>
                        |  <multiplicative-expression>
                        ;

<multiplicative-expression> ::= <multiplicative-expression> "*" <unary-expression>
                              |  <multiplicative-expression> "/" <unary-expression>
                              |  <multiplicative-expression> "%" <unary-expression>
                              |  <unary-expression>
                              ;

<unary-expression> ::= <unary-operator> <unary-expression>
                     |  <postfix-expression>
                     ;

<unary-operator> ::= "!"
                   |  "+"
                   |  "-"
                   |  "*"
                   |  "&"
                   ;

<postfix-expression> ::= <postfix-expression> "[" <expression> "]"
                       |  <postfix-expression> "(" <argument-list-opt> ")"
                       |  <primary-expression>
                       ;

<argument-list-opt> ::= <argument-list>
                      |  ε
                      ;

<argument-list> ::= <assignment-expression>
                  |  <argument-list> "," <assignment-expression>
                  ;

<primary-expression> ::= ID
                       |  INT_LITERAL
                       |  CHAR_LITERAL
                       |  STRING_LITERAL
                       |  BOOL_LITERAL
                       |  "(" <expression> ")"
                       ;

<constant-expression> ::= <logical-or-expression>
                        ;

<initializer> ::= <assignment-expression>
                |  "{" <initializer-list> "}"
                |  "{" <initializer-list> "," "}"
                ;

<initializer-list> ::= <initializer>
                     |  <initializer-list> "," <initializer>
                     ;

